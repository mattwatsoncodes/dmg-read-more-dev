name: Sync and Build Plugin

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the source repository (dmg-read-more-dev) at the release tag
      - name: Check out the source repository
        uses: actions/checkout@v2
        with:
          repository: mattwatsoncodes/dmg-read-more-dev
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name }}

      # Step 2: Set up PHP and Node.js for dependency installation and building
      - name: Set up Node.js and PHP
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      # Step 3: Extract release version, title, and body
      - name: Get release information
        id: get_release_info
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION_NO_V="${VERSION#v}"
          FULL_MESSAGE="${{ github.event.release.body }}"
          TITLE="$(echo "$FULL_MESSAGE" | head -n 1)"
          BODY="$(echo "$FULL_MESSAGE" | tail -n +2)"

          echo "::set-output name=VERSION::$VERSION"
          echo "::set-output name=VERSION_NO_V::$VERSION_NO_V"
          echo "::set-output name=TITLE::$TITLE"
          echo "::set-output name=BODY::$BODY"

      # Step 4: Clone the target repository (dmg-read-more)
      - name: Clone target repository
        run: |
          git clone https://x-access-token:${{ secrets.RELEASE_REPO_TOKEN }}@github.com/mattwatsoncodes/dmg-read-more.git target_repo

      # Step 5: Copy required files while keeping commit history
      - name: Copy selected files while preserving commit history
        run: |
          cd target_repo
          git remote add source_repo ../
          git fetch --all # Ensures all branches are fetched
          
          # Get the default branch of the target repo
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          
          # If no default branch is found, assume "main"
          if [ -z "$DEFAULT_BRANCH" ]; then
            DEFAULT_BRANCH="main"
          fi
          
          echo "Default branch detected: $DEFAULT_BRANCH"
          
          # Ensure the branch exists before checking out
          if git show-ref --quiet refs/heads/$DEFAULT_BRANCH; then
            git checkout -b update-from-dev origin/$DEFAULT_BRANCH || git checkout -b update-from-dev
          else
            echo "Default branch '$DEFAULT_BRANCH' not found. Creating it now."
            git checkout --orphan $DEFAULT_BRANCH
            git commit --allow-empty -m "Initialize empty main branch"
            git push origin $DEFAULT_BRANCH
            git checkout -b update-from-dev
          fi
          
          # Pull latest changes (only if the branch exists)
          git pull --no-commit --no-edit origin $DEFAULT_BRANCH || true

          # Remove everything except the required files
          find . -mindepth 1 -maxdepth 1 ! -name 'inc' ! -name 'src' ! -name 'dmg-read-more.php' -exec rm -rf {} +

          # Check if repo is empty and warn
          if [ -z "$(ls -A)" ]; then
            echo "Warning: Target repository is empty. Proceeding with fresh files."
          else
            echo "Target repository contains files. Proceeding with sync."
          fi
          
          # Ensure required files exist
          if [ ! -d "inc" ] || [ ! -d "src" ] || [ ! -f "dmg-read-more.php" ]; then
            echo "Error: Required files are missing after copying."
            exit 1
          fi

          # Commit the changes
          git add .
          git commit -m "Sync selected files from dmg-read-more-dev to dmg-read-more while preserving commit history"

      # Step 6: Update version numbers in relevant files
      - name: Update version numbers
        run: |
          cd target_repo

          VERSION_NO_V="${{ steps.get_release_info.outputs.VERSION_NO_V }}"
          TITLE="${{ steps.get_release_info.outputs.TITLE }}"
          BODY="${{ steps.get_release_info.outputs.BODY }}"

          # Replace version in readme.txt
          sed -i "s/^\(Stable tag:\s*\).*/\1$VERSION_NO_V/" readme.txt

          # Replace version in package.json
          sed -i "s/^\(\s*\"version\":\s*\"\)[^\"]*\(\"\s*,\)/\1$VERSION_NO_V\2/" package.json

          # Add changelog to readme.txt
          awk -v ver="$VERSION_NO_V" -v body="$BODY" '/== Changelog ==/ { print; print ""; print "= " ver " ="; print body; next } { print }' readme.txt > readme_temp.txt && mv readme_temp.txt readme.txt

          # Commit version updates
          git add .
          git commit -m "Update version to $VERSION_NO_V and update changelog"

      # Step 7: Install dependencies and build assets in dmg-read-more
      - name: Install dependencies and build assets
        run: |
          cd target_repo
          composer install || { echo "Composer installation failed"; exit 1; }
          npm install || { echo "npm install failed"; exit 1; }
          npm run build || { echo "npm run build failed"; exit 1; }

      # Step 8: Verify that the /build folder was successfully created
      - name: Verify build folder and contents
        run: |
          cd target_repo
          if [ -d "build" ]; then
            echo "Build folder exists."
            ls -la build  # List contents of the build folder for verification
          else
            echo "Error: Build folder does not exist!"
            exit 1
          fi

      # Step 9: Commit built assets to the target repository
      - name: Commit built assets
        run: |
          cd target_repo
          git add build
          git commit -m "Build assets for release ${{ steps.get_release_info.outputs.VERSION }}"
          git push origin update-from-dev # Push to a separate branch for review

      # Step 10: Create a pull request in dmg-read-more to review and merge changes
      - name: Create a PR in target repository
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.RELEASE_REPO_TOKEN }}
          repository: mattwatsoncodes/dmg-read-more
          title: "Sync from dmg-read-more-dev: ${{ steps.get_release_info.outputs.VERSION }}"
          body: "This PR syncs selected files from dmg-read-more-dev, updates the version, and builds the assets."
          branch: update-from-dev

      # Step 11: Output success message
      - name: Complete release process
        run: |
          echo "Sync and build process completed successfully. A pull request has been created in dmg-read-more."
