name: Sync and Build Plugin

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # ---------------------------------------------------------------------------
      # Step 1: Check out the dev repository (dmg-read-more-dev) from its main branch.
      # (No changes are pushed back to this repository.)
      # ---------------------------------------------------------------------------
      - name: Check out dev repository (main branch)
        uses: actions/checkout@v2
        with:
          repository: mattwatsoncodes/dmg-read-more-dev
          fetch-depth: 0
          ref: main

      # ---------------------------------------------------------------------------
      # Step 2: Set up Node.js (v18) and PHP.
      # ---------------------------------------------------------------------------
      - name: Set up Node.js and PHP
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      # ---------------------------------------------------------------------------
      # Step 3: Extract release information and export version-related variables.
      # (These variables can be used for commit messages and PR titles.)
      # ---------------------------------------------------------------------------
      - name: Get release information
        id: get_release_info
        run: |
          VERSION="0.2.1"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Remove any leading "v" (if present)
          VERSION_NO_V="${VERSION#v}"
          echo "VERSION_NO_V=$VERSION_NO_V" >> $GITHUB_ENV
          
          # Create a sample changelog message
          FULL_MESSAGE=$(echo "Deployment script test - Deployment script test" | tr '\n' ' ')
          echo "FULL_MESSAGE=$FULL_MESSAGE" >> $GITHUB_ENV
          
          # Use the first line as TITLE and the rest as BODY
          TITLE=$(echo "Deployment script test - Deployment script test" | head -n 1)
          {
            echo "TITLE<<EOF" >> $GITHUB_ENV
            echo "$TITLE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          }
          BODY=$(echo "Deployment script test - Deployment script test" | tail -n +2)
          {
            echo "BODY<<EOF" >> $GITHUB_ENV
            echo "$BODY" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          }

      # ---------------------------------------------------------------------------
      # Step 4: Clone the target repository (dmg-read-more) into a subdirectory.
      # ---------------------------------------------------------------------------
      - name: Clone target repository
        run: |
          git clone https://x-access-token:${{ secrets.RELEASE_REPO_TOKEN }}@github.com/mattwatsoncodes/dmg-read-more.git target_repo

      # ---------------------------------------------------------------------------
      # Step 5: In the target repository, create a new branch for these updates.
      # ---------------------------------------------------------------------------
      - name: Create update branch in target repository
        run: |
          cd target_repo
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          DEFAULT_BRANCH=${DEFAULT_BRANCH:-"main"}
          echo "Detected default branch: $DEFAULT_BRANCH"
          # Create (or switch to) a new branch named update-from-dev.
          git checkout -b update-from-dev origin/$DEFAULT_BRANCH || git checkout -b update-from-dev

      # ---------------------------------------------------------------------------
      # Step 6: Copy all files from the dev repository into the target repository.
      # (We exclude the .git folder so as not to disturb the target repo’s history.)
      # ---------------------------------------------------------------------------
      - name: Copy files from dev repository to target repository
        run: |
          # From the workspace root (the dev repository checkout), copy everything (except .git)
          rsync -av --exclude='.git' ./ target_repo/

      # ---------------------------------------------------------------------------
      # Step 7: Remove .gitignore from the target repository so that the build folder won’t be ignored.
      # ---------------------------------------------------------------------------
      - name: Remove .gitignore from target repository
        run: |
          cd target_repo
          rm -f .gitignore
          echo ".gitignore removed."

      # ---------------------------------------------------------------------------
      # Step 8: Install dependencies and build assets in the target repository.
      # (We perform the build while composer.json and package.json are still present.)
      # ---------------------------------------------------------------------------
      - name: Build assets in target repository
        run: |
          cd target_repo
          composer install --no-dev || { echo "Composer installation failed"; exit 1; }
          npm install || { echo "npm install failed"; exit 1; }
          npm run build || { echo "npm run build failed"; exit 1; }
          if [ ! -d "build" ]; then
            echo "Error: Build folder does not exist!"
            exit 1
          fi
          echo "Assets built in target repository."

      # ---------------------------------------------------------------------------
      # Step 9: Remove unwanted files from the target repository after the build.
      # ---------------------------------------------------------------------------
      - name: Remove unwanted files in target repository
        run: |
          cd target_repo
          rm -rf .girhub stubs .editorconfig .eslintrc.js .stylelint.json composer.json composer.lock package-lock.json package.json phpcs.xml.dist phpstan.neon webpack.config.js
          echo "Unwanted files removed."

      # ---------------------------------------------------------------------------
      # Step 10: Commit the changes (built assets and file removals) to the target repository.
      # ---------------------------------------------------------------------------
      - name: Commit changes in target repository
        run: |
          cd target_repo
          git config user.email "matt@mattwatson.codes"
          git config user.name "Matt Watson"
          git add .
          git commit -m "Sync from dmg-read-more-dev main and build assets for release $VERSION"
          git push origin update-from-dev

      # ---------------------------------------------------------------------------
      # Step 11: Create a pull request in the target repository.
      # ---------------------------------------------------------------------------
      - name: Create PR in target repository
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.RELEASE_REPO_TOKEN }}
          repository: mattwatsoncodes/dmg-read-more
          title: "Sync from dmg-read-more-dev main: $VERSION"
          body: "This PR copies the main branch of dmg-read-more-dev into dmg-read-more, removes unwanted files, and builds assets."
          branch: update-from-dev

      # ---------------------------------------------------------------------------
      # Step 12: Output a success message.
      # ---------------------------------------------------------------------------
      - name: Complete release process
        run: echo "✅ Sync and build process completed successfully. A pull request has been created in dmg-read-more."
